
    private ArrayList<String> questionTypeList = new ArrayList<>();
    private ArrayList<String> questionList = new ArrayList<>();
    private ArrayList<String> questionTypeValueList = new ArrayList<>();
    private ArrayList<String> othersEditTextValueList = new ArrayList<>();

    private ArrayList<TextView> textViewList = new ArrayList<>();
    private ArrayList<EditText> editTextList = new ArrayList<>();
    private ArrayList<EditText> othersEditTextList = new ArrayList<>();
    private ArrayList<Button> buttonList = new ArrayList<>();
    private ArrayList<Spinner> spinnerList = new ArrayList<>();
    private ArrayList<CheckBox> checkBoxList = new ArrayList<>();
    private ArrayList<RadioButton> radioGroupButtonList = new ArrayList<>();
    private ArrayList<RadioGroup> radioGroupList = new ArrayList<>();
    private ArrayList<RatingBar> ratingBarList = new ArrayList<>();

    private ArrayList<Button> dateList = new ArrayList<>();
    private ArrayList<Button> timeList = new ArrayList<>();

    private ArrayList<Button> dateTimeList1 = new ArrayList<>();
    private ArrayList<Button> dateTimeList2 = new ArrayList<>();

   private void makeSurveyQuestion() {

       /* if (surveyEntryId==0){
            return;
        }*/
        questionTypeList = questioneryManager.getQuestionTypeList(surveyEntryId);
        questionList = questioneryManager.getQuestionList(surveyEntryId);
        othersEditTextValueList = questioneryManager.getOthersEditTextValueList(surveyEntryId);


        for (String fieldType : questionTypeList) {

            questionTypeValueList = questioneryManager.getQuestionTypeValueList(surveyEntryId, i + 1);

            CardView cardView = new CardView(this);
            LinearLayout.LayoutParams cardViewLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            cardViewLp.setMargins(0, 40, 0, 0);
            cardView.setLayoutParams(cardViewLp);
            LinearLayout linearLayoutForCordView = new LinearLayout(this);
            linearLayoutForCordView.setOrientation(LinearLayout.VERTICAL);

            TextView questionTv = new TextView(this);
            textViewList.add(questionTv);
            LinearLayout.LayoutParams questionLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            //questionLp.setMargins(0, 150, 0, 0);
            questionLp.setMargins(10, 50, 10, 0);
            textViewList.get(i).setLayoutParams(questionLp);
            // linearLayout.addView(textViewList.get(i));
            linearLayoutForCordView.addView(textViewList.get(i));
            textViewList.get(i).setText(questionList.get(i));
            textViewList.get(i).setGravity(Gravity.CENTER);
            textViewList.get(i).setBackgroundResource(R.drawable.border1);

            if (fieldType.equals(ResponseCode.EDIT_TEXT) ||
                    fieldType.equals(ResponseCode.EDIT_TEXT_SINGLE) ||
                    fieldType.equals(ResponseCode.EDIT_TEXT_COMMENT_BOX)) {

                /*LinearLayout.LayoutParams cardViewLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                cardViewLp.setMargins(40, 40, 40, 0);
                cardView.setLayoutParams(cardViewLp);*/

                for (int j = 0; j < questionTypeValueList.size(); j++) {
                    EditText editText = new EditText(this);
                    LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                    editTextLp.setMargins(40, 40, 40, 0);
                    editText.setLayoutParams(editTextLp);
                    editTextList.add(editText);
                    // linearLayout.addView(editTextList.get(editTextIndex));
                    linearLayoutForCordView.addView(editTextList.get(editTextIndex));
                    editTextList.get(editTextIndex).setHint(questionTypeValueList.get(j));
                    editTextIndex++;
                }

                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    //  linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }
                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);
            }
            if (fieldType.equals(ResponseCode.SPINNER)) {

                Spinner spinner = new Spinner(this);
                LinearLayout.LayoutParams spinnerLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                spinnerLp.setMargins(40, 40, 40, 40);
                spinner.setLayoutParams(spinnerLp);
                spinnerList.add(spinner);
                spinnerList.get(spinnerIndex).setId(spinnerIndex);
                //linearLayout.addView(spinnerList.get(spinnerIndex));
                linearLayoutForCordView.addView(spinnerList.get(spinnerIndex));
                spinner.setBackgroundResource(R.drawable.border_2);
                ArrayAdapter<String> adapter = new ArrayAdapter(this, android.R.layout.simple_list_item_1, questionTypeValueList);
                spinnerList.get(spinnerIndex).setAdapter(adapter);


                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 0);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    // linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);

               /* spinnerList.get(spinnerIndex).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                    @Override
                    public void onItemSelected(AdapterView<?> parent, View view,
                                               int position, long number) {

                        Spinner spinner = (Spinner) parent;

                        int index = spinnerList.indexOf(spinner);
                        int spinnerId = spinner.getId();

                        for (int i = 0; i < spinnerList.size(); i++) {
                            spinnerAnswerList.add("");
                        }
                        String spinnerAnswer = parent.getItemAtPosition(position).toString();
                        spinnerAnswerList.set(spinnerId, spinnerAnswer);

                        // Toast.makeText(MainActivity.this, spinnerId + "=" + index, Toast.LENGTH_SHORT).show();

                    }

                    @Override
                    public void onNothingSelected(AdapterView<?> arg0) {

                    }
                });*/

                spinnerIndex++;

            }
            if (fieldType.equals(ResponseCode.CHECK_BOX)) {

                for (int j = 0; j < questionTypeValueList.size(); j++) {
                    CheckBox checkBox = new CheckBox(this);
                    LinearLayout.LayoutParams checkBoxLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                    if (j == 0) {
                        checkBoxLp.setMargins(40, 40, 40, 0);
                    } else if (j == questionTypeValueList.size() - 1) {
                        checkBoxLp.setMargins(40, 5, 40, 40);
                    } else {
                        checkBoxLp.setMargins(40, 5, 40, 0);
                    }
                    checkBoxList.add(checkBox);
                    checkBoxList.get(checkBoxIndex).setLayoutParams(checkBoxLp);
                    //linearLayout.addView(checkBoxList.get(checkBoxIndex));
                    linearLayoutForCordView.addView(checkBoxList.get(checkBoxIndex));

                    checkBoxList.get(checkBoxIndex).setText(questionTypeValueList.get(j));


                    checkBoxIndex++;
                }

                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    //  linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);

            }
            if (fieldType.equals(ResponseCode.RADIO_GROUP)) {
                RadioGroup radioGroup = new RadioGroup(this);
                LinearLayout.LayoutParams radioGroupLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                radioGroupLp.setMargins(40, 40, 40, 40);
                radioGroup.setLayoutParams(radioGroupLp);

                for (int j = 0; j < questionTypeValueList.size(); j++) {
                    RadioButton radioButton = new RadioButton(this);
                    radioGroupButtonList.add(radioButton);
                    radioGroup.addView(radioGroupButtonList.get(radioButtonIndex));
                    radioGroupButtonList.get(radioButtonIndex).setText(questionTypeValueList.get(j));
                    radioButtonIndex++;
                }
                radioGroupList.add(radioGroup);
                // linearLayout.addView(radioGroupList.get(radioGroupIndex));
                linearLayoutForCordView.addView(radioGroupList.get(radioGroupIndex));

                radioGroupIndex++;

                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    // linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);


            }
            if (fieldType.equals(ResponseCode.STAR_RATING) || fieldType.equals(ResponseCode.RANKING)) {

                RatingBar ratingBar = new RatingBar(this);
                LinearLayout.LayoutParams ratingBarLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                ratingBarLp.setMargins(40, 40, 40, 40);
                ratingBar.setLayoutParams(ratingBarLp);
                ratingBar.setStepSize(1);
                ratingBar.setMax(5);
                ratingBar.setRating(0);
                ratingBar.setNumStars(5);

                ratingBarList.add(ratingBar);

                //  linearLayout.addView(ratingBarList.get(ratingBarIndex));

                linearLayoutForCordView.addView(ratingBarList.get(ratingBarIndex));


                ratingBarList.get(ratingBarIndex).setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener() {

                    @Override
                    public void onRatingChanged(RatingBar ratingBar, float rating, boolean fromUser) {

                        // String rateValue = String.valueOf(ratingBarList.get(ratingBarIndex).getRating());
                        //  Toast.makeText(MainActivity.this, rateValue, Toast.LENGTH_SHORT).show();
                    }
                });

                ratingBarIndex++;

                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    //linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);

            }
            if (fieldType.equals(ResponseCode.DATE_PICKER)) {

                final Button button = new Button(this);
                LinearLayout.LayoutParams buttonLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                buttonLp.setMargins(40, 40, 40, 40);
                button.setLayoutParams(buttonLp);
                button.setHint("Get Date");
                button.setBackgroundResource(R.drawable.border_button);
                button.setGravity(Gravity.CENTER);

                dateList.add(button);

                // linearLayout.addView(dateList.get(dateIndex));
                linearLayoutForCordView.addView(dateList.get(dateIndex));

                dateList.get(dateIndex).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        Button button = (Button) view;
                        int datePickerButtonIndex = dateList.indexOf(button);
                        datePick(dateList.get(datePickerButtonIndex));
                    }
                });

                dateIndex++;


                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    //linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);


            }
            if (fieldType.equals(ResponseCode.TIME_PICKER)) {
                final Button button = new Button(this);
                LinearLayout.LayoutParams buttonLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                buttonLp.setMargins(40, 40, 40, 40);
                button.setLayoutParams(buttonLp);
                button.setHint("Get Time");
                button.setBackgroundResource(R.drawable.border_button);
                button.setGravity(Gravity.CENTER);

                timeList.add(button);

                // linearLayout.addView(timeList.get(timeIndex));
                linearLayoutForCordView.addView(timeList.get(timeIndex));

                timeList.get(timeIndex).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Button button = (Button) view;
                        int timePickerButtonIndex = timeList.indexOf(button);
                        timePick(timeList.get(timePickerButtonIndex));
                    }
                });

                timeIndex++;

                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    // linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);
            }
            if (fieldType.equals(ResponseCode.DATE_TIME_PICKER)) {


                final Button button = new Button(this);
                LinearLayout.LayoutParams buttonLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                buttonLp.setMargins(40, 40, 40, 0);
                button.setLayoutParams(buttonLp);
                button.setHint("Get Date");
                button.setBackgroundResource(R.drawable.border_button);
                button.setGravity(Gravity.CENTER);

                dateTimeList1.add(button);

                // linearLayout.addView(dateTimeList1.get(dateTimeIndex));
                linearLayoutForCordView.addView(dateTimeList1.get(dateTimeIndex));

                dateTimeList1.get(dateTimeIndex).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        Button button = (Button) view;
                        int datePickerButtonIndex = dateTimeList1.indexOf(button);
                        datePick(dateTimeList1.get(datePickerButtonIndex));
                    }
                });

                //dateIndex++;

                final Button buttonTime = new Button(this);
                LinearLayout.LayoutParams buttonTimeLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                buttonTimeLp.setMargins(40, 40, 40, 40);
                buttonTime.setLayoutParams(buttonTimeLp);
                buttonTime.setHint("Get Time");
                buttonTime.setBackgroundResource(R.drawable.border_button);
                buttonTime.setGravity(Gravity.CENTER);

                dateTimeList2.add(buttonTime);

                //  linearLayout.addView(dateTimeList2.get(dateTimeIndex));
                linearLayoutForCordView.addView(dateTimeList2.get(dateTimeIndex));

                dateTimeList2.get(dateTimeIndex).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Button button = (Button) view;
                        int timePickerButtonIndex = dateTimeList2.indexOf(button);
                        timePick(dateTimeList2.get(timePickerButtonIndex));
                    }
                });

                dateTimeIndex++;

                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    //  linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);
            }

            i++;
        }

        resetIndexValue();

    }

    private void resetIndexValue() {

        checkBoxIndex = 0;
        radioButtonIndex = 0;
        radioGroupIndex = 0;
        spinnerIndex = 0;
        editTextIndex = 0;
        ratingBarIndex = 0;
        dateIndex = 0;
        timeIndex = 0;
        dateTimeIndex = 0;
        i = 0;
        m = 0;
    }

    private void makeSurveyQuestionByModel() {

       /* if (surveyEntryId==0){
            return;
        }*/
        questionTypeList = questioneryManager.getQuestionTypeList(surveyEntryId);
        questionList = questioneryManager.getQuestionList(surveyEntryId);
        othersEditTextValueList = questioneryManager.getOthersEditTextValueList(surveyEntryId);


        for (String fieldType : questionTypeList) {

            questionTypeValueList = questioneryManager.getQuestionTypeValueList(surveyEntryId, i + 1);

            CardView cardView = new CardView(this);
            LinearLayout.LayoutParams cardViewLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            cardViewLp.setMargins(0, 40, 0, 0);
            cardView.setLayoutParams(cardViewLp);
            LinearLayout linearLayoutForCordView = new LinearLayout(this);
            linearLayoutForCordView.setOrientation(LinearLayout.VERTICAL);

            TextView questionTv = new TextView(this);
            textViewList.add(questionTv);
            LinearLayout.LayoutParams questionLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
            //questionLp.setMargins(0, 150, 0, 0);
            questionLp.setMargins(10, 50, 10, 0);
            textViewList.get(i).setLayoutParams(questionLp);
            // linearLayout.addView(textViewList.get(i));
            linearLayoutForCordView.addView(textViewList.get(i));
            textViewList.get(i).setText(questionList.get(i));
            textViewList.get(i).setGravity(Gravity.CENTER);
            textViewList.get(i).setBackgroundResource(R.drawable.border1);

            if (fieldType.equals(ResponseCode.EDIT_TEXT)) {



                /*LinearLayout.LayoutParams cardViewLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                cardViewLp.setMargins(40, 40, 40, 0);
                cardView.setLayoutParams(cardViewLp);*/

                for (int j = 0; j < questionTypeValueList.size(); j++) {
                    EditText editText = new EditText(this);
                    LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                    editTextLp.setMargins(40, 40, 40, 0);
                    editText.setLayoutParams(editTextLp);
                    editTextList.add(editText);
                    // linearLayout.addView(editTextList.get(editTextIndex));
                    linearLayoutForCordView.addView(editTextList.get(editTextIndex));
                    editTextList.get(editTextIndex).setHint(questionTypeValueList.get(j));
                    editTextIndex++;
                }

                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    //  linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }
                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);
            }
            if (fieldType.equals(ResponseCode.SPINNER)) {

                Spinner spinner = new Spinner(this);
                LinearLayout.LayoutParams spinnerLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                spinnerLp.setMargins(40, 40, 40, 40);
                spinner.setLayoutParams(spinnerLp);
                spinnerList.add(spinner);
                spinnerList.get(spinnerIndex).setId(spinnerIndex);
                //linearLayout.addView(spinnerList.get(spinnerIndex));
                linearLayoutForCordView.addView(spinnerList.get(spinnerIndex));
                spinner.setBackgroundResource(R.drawable.border_2);
                ArrayAdapter<String> adapter = new ArrayAdapter(this, android.R.layout.simple_list_item_1, questionTypeValueList);
                spinnerList.get(spinnerIndex).setAdapter(adapter);


                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 0);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    // linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);

               /* spinnerList.get(spinnerIndex).setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                    @Override
                    public void onItemSelected(AdapterView<?> parent, View view,
                                               int position, long number) {

                        Spinner spinner = (Spinner) parent;

                        int index = spinnerList.indexOf(spinner);
                        int spinnerId = spinner.getId();

                        for (int i = 0; i < spinnerList.size(); i++) {
                            spinnerAnswerList.add("");
                        }
                        String spinnerAnswer = parent.getItemAtPosition(position).toString();
                        spinnerAnswerList.set(spinnerId, spinnerAnswer);

                        // Toast.makeText(MainActivity.this, spinnerId + "=" + index, Toast.LENGTH_SHORT).show();

                    }

                    @Override
                    public void onNothingSelected(AdapterView<?> arg0) {

                    }
                });*/

                spinnerIndex++;

            }
            if (fieldType.equals(ResponseCode.CHECK_BOX)) {

                for (int j = 0; j < questionTypeValueList.size(); j++) {
                    CheckBox checkBox = new CheckBox(this);
                    LinearLayout.LayoutParams checkBoxLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                    if (j == 0) {
                        checkBoxLp.setMargins(40, 40, 40, 0);
                    } else if (j == questionTypeValueList.size() - 1) {
                        checkBoxLp.setMargins(40, 5, 40, 40);
                    } else {
                        checkBoxLp.setMargins(40, 5, 40, 0);
                    }
                    checkBoxList.add(checkBox);
                    checkBoxList.get(checkBoxIndex).setLayoutParams(checkBoxLp);
                    //linearLayout.addView(checkBoxList.get(checkBoxIndex));
                    linearLayoutForCordView.addView(checkBoxList.get(checkBoxIndex));

                    checkBoxList.get(checkBoxIndex).setText(questionTypeValueList.get(j));


                    checkBoxIndex++;
                }

                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    //  linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);

            }
            if (fieldType.equals(ResponseCode.RADIO_GROUP)) {
                RadioGroup radioGroup = new RadioGroup(this);
                LinearLayout.LayoutParams radioGroupLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                radioGroupLp.setMargins(40, 40, 40, 40);
                radioGroup.setLayoutParams(radioGroupLp);

                for (int j = 0; j < questionTypeValueList.size(); j++) {
                    RadioButton radioButton = new RadioButton(this);
                    radioGroupButtonList.add(radioButton);
                    radioGroup.addView(radioGroupButtonList.get(radioButtonIndex));
                    radioGroupButtonList.get(radioButtonIndex).setText(questionTypeValueList.get(j));
                    radioButtonIndex++;
                }
                radioGroupList.add(radioGroup);
                // linearLayout.addView(radioGroupList.get(radioGroupIndex));
                linearLayoutForCordView.addView(radioGroupList.get(radioGroupIndex));

                radioGroupIndex++;

                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    // linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);


            }
            if (fieldType.equals(ResponseCode.STAR_RATING)) {

                RatingBar ratingBar = new RatingBar(this);
                LinearLayout.LayoutParams ratingBarLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                ratingBarLp.setMargins(40, 40, 40, 40);
                ratingBar.setLayoutParams(ratingBarLp);
                ratingBar.setStepSize(1);
                ratingBar.setMax(5);
                ratingBar.setRating(0);
                ratingBar.setNumStars(5);

                ratingBarList.add(ratingBar);

                //  linearLayout.addView(ratingBarList.get(ratingBarIndex));

                linearLayoutForCordView.addView(ratingBarList.get(ratingBarIndex));


                ratingBarList.get(ratingBarIndex).setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener() {

                    @Override
                    public void onRatingChanged(RatingBar ratingBar, float rating, boolean fromUser) {

                        // String rateValue = String.valueOf(ratingBarList.get(ratingBarIndex).getRating());
                        //  Toast.makeText(MainActivity.this, rateValue, Toast.LENGTH_SHORT).show();
                    }
                });

                ratingBarIndex++;

                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    //linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);

            }
            if (fieldType.equals(ResponseCode.DATE_PICKER)) {

                final Button button = new Button(this);
                LinearLayout.LayoutParams buttonLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                buttonLp.setMargins(40, 40, 40, 40);
                button.setLayoutParams(buttonLp);
                button.setHint("Get Date");
                button.setBackgroundResource(R.drawable.border_button);
                button.setGravity(Gravity.CENTER);

                dateList.add(button);

                // linearLayout.addView(dateList.get(dateIndex));
                linearLayoutForCordView.addView(dateList.get(dateIndex));

                dateList.get(dateIndex).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        Button button = (Button) view;
                        int datePickerButtonIndex = dateList.indexOf(button);
                        datePick(dateList.get(datePickerButtonIndex));
                    }
                });

                dateIndex++;


                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    //linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);


            }
            if (fieldType.equals(ResponseCode.TIME_PICKER)) {
                final Button button = new Button(this);
                LinearLayout.LayoutParams buttonLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                buttonLp.setMargins(40, 40, 40, 40);
                button.setLayoutParams(buttonLp);
                button.setHint("Get Time");
                button.setBackgroundResource(R.drawable.border_button);
                button.setGravity(Gravity.CENTER);

                timeList.add(button);

                // linearLayout.addView(timeList.get(timeIndex));
                linearLayoutForCordView.addView(timeList.get(timeIndex));

                timeList.get(timeIndex).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Button button = (Button) view;
                        int timePickerButtonIndex = timeList.indexOf(button);
                        timePick(timeList.get(timePickerButtonIndex));
                    }
                });

                timeIndex++;

                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    // linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);
            }
            if (fieldType.equals(ResponseCode.DATE_TIME_PICKER)) {


                final Button button = new Button(this);
                LinearLayout.LayoutParams buttonLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                buttonLp.setMargins(40, 40, 40, 0);
                button.setLayoutParams(buttonLp);
                button.setHint("Get Date");
                button.setBackgroundResource(R.drawable.border_button);
                button.setGravity(Gravity.CENTER);

                dateTimeList1.add(button);

                // linearLayout.addView(dateTimeList1.get(dateTimeIndex));
                linearLayoutForCordView.addView(dateTimeList1.get(dateTimeIndex));

                dateTimeList1.get(dateTimeIndex).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {

                        Button button = (Button) view;
                        int datePickerButtonIndex = dateTimeList1.indexOf(button);
                        datePick(dateTimeList1.get(datePickerButtonIndex));
                    }
                });

                //dateIndex++;

                final Button buttonTime = new Button(this);
                LinearLayout.LayoutParams buttonTimeLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                buttonTimeLp.setMargins(40, 40, 40, 40);
                buttonTime.setLayoutParams(buttonTimeLp);
                buttonTime.setHint("Get Time");
                buttonTime.setBackgroundResource(R.drawable.border_button);
                buttonTime.setGravity(Gravity.CENTER);

                dateTimeList2.add(buttonTime);

                //  linearLayout.addView(dateTimeList2.get(dateTimeIndex));
                linearLayoutForCordView.addView(dateTimeList2.get(dateTimeIndex));

                dateTimeList2.get(dateTimeIndex).setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        Button button = (Button) view;
                        int timePickerButtonIndex = dateTimeList2.indexOf(button);
                        timePick(dateTimeList2.get(timePickerButtonIndex));
                    }
                });

                dateTimeIndex++;

                EditText editText = new EditText(this);
                LinearLayout.LayoutParams editTextLp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                editTextLp.setMargins(40, 40, 40, 40);
                editText.setLayoutParams(editTextLp);
                othersEditTextList.add(editText);

                if (othersEditTextValueList.get(i).equals("1")) {
                    //  linearLayout.addView(othersEditTextList.get(i));
                    linearLayoutForCordView.addView(othersEditTextList.get(i));
                    othersEditTextList.get(i).setHint("Others");
                }

                cardView.addView(linearLayoutForCordView);
                linearLayout.addView(cardView);
            }

            i++;
        }

        resetIndexValue();

    }


    private void datePick(final Button dateBtn) {

        final Calendar myCalendar = Calendar.getInstance();

        DatePickerDialog.OnDateSetListener date = new DatePickerDialog.OnDateSetListener() {
            @Override
            public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
                // TODO Auto-generated method stub
                myCalendar.set(Calendar.YEAR, year);
                myCalendar.set(Calendar.MONTH, monthOfYear);
                myCalendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);
                DateFormat dateFormat = new java.text.SimpleDateFormat("dd-MM-yyyy");
                dateBtn.setText(dateFormat.format(myCalendar.getTime()));
            }

        };

        new DatePickerDialog(this, date, myCalendar.get(Calendar.YEAR), myCalendar.get(Calendar.MONTH), myCalendar.get(Calendar.DAY_OF_MONTH)).show();


    }

    private void timePick(final Button timeBtn) {

        Calendar mcurrentTime = Calendar.getInstance();
        int hour = mcurrentTime.get(Calendar.HOUR_OF_DAY);
        int minute = mcurrentTime.get(Calendar.MINUTE);

        TimePickerDialog mTimePicker;
        mTimePicker = new TimePickerDialog(this, new TimePickerDialog.OnTimeSetListener() {
            @Override
            public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {

                String selectedHourString = String.valueOf(selectedHour);
                String selectedMinuteString = String.valueOf(selectedMinute);

                if (selectedHour < 10) {
                    selectedHourString = "0" + selectedHour;
                }
                if (selectedMinute < 10) {
                    selectedMinuteString = "0" + selectedMinute;
                }

                timeBtn.setText(selectedHourString + ":" + selectedMinuteString);

            }
        }, hour, minute, true);//Yes 24 hour time
        mTimePicker.setTitle("Select Time");
        mTimePicker.show();


    }

    private void dataRetrieve() {

       /* if (surveyEntryId==0){
            return;
        }*/
        questionTypeList = questioneryManager.getQuestionTypeList(surveyEntryId);
        questionList = questioneryManager.getQuestionList(surveyEntryId);
        othersEditTextValueList = questioneryManager.getOthersEditTextValueList(surveyEntryId);


        for (String fieldType : questionTypeList) {

            questionTypeValueList = questioneryManager.getQuestionTypeValueList(surveyEntryId, m + 1);

            if (fieldType.equals(ResponseCode.EDIT_TEXT)) {

                for (int j = 0; j < questionTypeValueList.size(); j++) {
                    editTextAnswerList.add(editTextList.get(editTextIndex).getText().toString());
                    editTextIndex++;
                }

                ArrayList<String> cloneValue = new ArrayList<>(editTextAnswerList);

                questionAnswer = new QuestionAnswer(surveyEntryId, m, questionList.get(m),
                        questionTypeList.get(m), othersEditTextList.get(m).getText().toString(), cloneValue);

                ResponseCode.FINAL_RESULT.add(questionAnswer);

                editTextAnswerList.clear();

            }

            if (fieldType.equals(ResponseCode.SPINNER)) {
                String spinnerAnswer = spinnerList.get(spinnerIndex).getSelectedItem().toString();

                spinnerAnswerList.add(spinnerAnswer);

                ArrayList<String> cloneValue = new ArrayList<>(spinnerAnswerList);

                questionAnswer = new QuestionAnswer(surveyEntryId, m, questionList.get(m),
                        questionTypeList.get(m), othersEditTextList.get(m).getText().toString(), cloneValue);

                ResponseCode.FINAL_RESULT.add(questionAnswer);

                spinnerAnswerList.clear();

                spinnerIndex++;
                //Toast.makeText(this, spinnerAnswer, Toast.LENGTH_SHORT).show();
            }

            if (fieldType.equals(ResponseCode.STAR_RATING)) {

                String ratingValue = String.valueOf(ratingBarList.get(ratingBarIndex).getRating());

                ratingAnswerList.add(ratingValue);
                ArrayList<String> cloneValue = new ArrayList<>(ratingAnswerList);

                questionAnswer = new QuestionAnswer(surveyEntryId, m, questionList.get(m),
                        questionTypeList.get(m), othersEditTextList.get(m).getText().toString(), cloneValue);

                ResponseCode.FINAL_RESULT.add(questionAnswer);

                ratingAnswerList.clear();

                ratingBarIndex++;
            }
            if (fieldType.equals(ResponseCode.CHECK_BOX)) {

                for (int j = 0; j < questionTypeValueList.size(); j++) {
                    if (checkBoxList.get(checkBoxIndex).isChecked()) {
                        checkBoxAnswerList.add(checkBoxList.get(checkBoxIndex).getText().toString());
                    }
                    checkBoxIndex++;
                }

                ArrayList<String> cloneValue = new ArrayList<>(checkBoxAnswerList);

                questionAnswer = new QuestionAnswer(surveyEntryId, m, questionList.get(m),
                        questionTypeList.get(m), othersEditTextList.get(m).getText().toString(), cloneValue);

                ResponseCode.FINAL_RESULT.add(questionAnswer);

                checkBoxAnswerList.clear();
            }
            if (fieldType.equals(ResponseCode.RADIO_GROUP)) {

                int selectedId = radioGroupList.get(radioGroupIndex).getCheckedRadioButtonId();

                if (selectedId > -1) {
                    String radioGroupAnswer = ((RadioButton) radioGroupList.get(radioGroupIndex).findViewById(selectedId)).getText().toString();
                    radioGroupAnswerList.add(radioGroupAnswer);
                }

                if (radioGroupAnswerList.size() == 0) {
                    Toast.makeText(this, questionList.get(m) + " invalid answer", Toast.LENGTH_SHORT).show();
                    ResponseCode.FINAL_RESULT.clear();
                    return;
                }

                // Toast.makeText(this, radioGroupAnswerList.get(0)+" AB", Toast.LENGTH_SHORT).show();

                ArrayList<String> cloneValue = new ArrayList<>(radioGroupAnswerList);

                questionAnswer = new QuestionAnswer(surveyEntryId, m, questionList.get(m),
                        questionTypeList.get(m), othersEditTextList.get(m).getText().toString(), cloneValue);

                ResponseCode.FINAL_RESULT.add(questionAnswer);


                radioGroupAnswerList.clear();

                radioGroupIndex++;
            }
            if (fieldType.equals(ResponseCode.DATE_PICKER)) {
                String date = dateList.get(dateIndex).getText().toString();
                dateAnswerList.add(date);

                ArrayList<String> cloneValue = new ArrayList<>(dateAnswerList);

                questionAnswer = new QuestionAnswer(surveyEntryId, m, questionList.get(m),
                        questionTypeList.get(m), othersEditTextList.get(m).getText().toString(), cloneValue);

                ResponseCode.FINAL_RESULT.add(questionAnswer);

                dateAnswerList.clear();

                dateIndex++;
            }
            if (fieldType.equals(ResponseCode.TIME_PICKER)) {
                String time = timeList.get(timeIndex).getText().toString();
                timeAnswerList.add(time);

                ArrayList<String> cloneValue = new ArrayList<>(timeAnswerList);

                questionAnswer = new QuestionAnswer(surveyEntryId, m, questionList.get(m),
                        questionTypeList.get(m), othersEditTextList.get(m).getText().toString(), cloneValue);

                ResponseCode.FINAL_RESULT.add(questionAnswer);

                timeAnswerList.clear();

                timeIndex++;
            }
            if (fieldType.equals(ResponseCode.DATE_TIME_PICKER)) {
                String date = dateTimeList1.get(dateTimeIndex).getText().toString();
                String time = dateTimeList2.get(dateTimeIndex).getText().toString();
                dateTimeAnswerList.add(date + " " + time);

                ArrayList<String> cloneValue = new ArrayList<>(dateTimeAnswerList);

                questionAnswer = new QuestionAnswer(surveyEntryId, m, questionList.get(m),
                        questionTypeList.get(m), othersEditTextList.get(m).getText().toString(), cloneValue);

                ResponseCode.FINAL_RESULT.add(questionAnswer);

                dateTimeAnswerList.clear();

                dateTimeIndex++;
            }

            m++;
        }

    }

    public void saveDataBtn(View view) {
        dataRetrieve();
        showData();
        resetIndexValue();
    }

    private void showData() {

        for (int m = 0; m < ResponseCode.FINAL_RESULT.size(); m++) {
            for (int n = 0; n < ResponseCode.FINAL_RESULT.get(m).getAnswers().size(); n++) {
                Toast.makeText(this, ResponseCode.FINAL_RESULT.get(m).getAnswers().get(n), Toast.LENGTH_SHORT).show();
            }
        }


    }
